/*
 * File: odometer_usecases.ums
 * Autore: Emanuele Aina <em@nerd.ocracy.org>
 * Licenza: LGPL
 */

actor rs232 = "RS232";
usecase readAngle = "Lettura angolo";
usecase readRevolutions = "Lettura rivoluzioni";
usecase setCoeff = "Imposta coefficiente";
usecase setK = "Imposta K";
usecase setK1 = "Imposta K1";
usecase setK2 = "Imposta K2";

usecase putCommand = "Invio comando";
usecase putData = "Invio dati";
usecase putSerial = "Invio via seriale";
usecase getSerial = "Ricezione via seriale";

actor encoder = Encoder;
usecase rotate = "Ruota di N gradi";
usecase fullRevolution = "Compie giro completo";
usecase decodeRotation = "Decodifica rotazione";
usecase updateCounters = "Aggiorna contatori";

usecasediagram odometer_usecases {
    comment = "Casi d'uso";
    layout = grid(4, 
        *,     *,          *, readAngle,      
        *,     getSerial,  *, readRevolutions,
        rs232, putCommand, *, setCoeff,       
        *,     putSerial,  *, setK,           
        *,     putData,    *, setK1,          
        *,     *,          *, setK2,          

        encoder, rotate,          *, decodeRotation,
        *,       fullRevolution,  *, updateCounters
        );
    entities {
        rs232 uses putSerial;
        rs232 uses getSerial;

        readAngle extends putCommand;
        readAngle extends getSerial;
        readRevolutions extends putCommand;
        readRevolutions extends getSerial;
        setCoeff extends putCommand;
        setCoeff extends putData;
        setK extends putCommand;
        setK extends putData;
        setK1 extends putCommand;
        setK1 extends putData;
        setK2 extends putCommand;
        setK2 extends putData;

        putCommand extends putSerial;
        putData    extends putSerial;

        encoder uses rotate;
        encoder uses fullRevolution;
        decodeRotation extends rotate;
        decodeRotation extends fullRevolution;
        updateCounters extends decodeRotation;
    }
}
